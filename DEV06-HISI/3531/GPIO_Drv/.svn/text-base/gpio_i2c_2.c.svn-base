/*    extdrv/interface/gpio_i2c/gpio_i2c.c
 *
 * 
 * Copyright (c) 2006 Hisilicon Co., Ltd. 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.
 * 
 *
 * History:
 *     03-Apr-2006 create this file
 *      
 */

#include <linux/module.h>
//#include <asm/hardware.h>
#include <linux/errno.h>
#include <linux/miscdevice.h>
#include <linux/fcntl.h>

#include <linux/init.h>
#include <linux/delay.h>
#include <linux/proc_fs.h>
#include <linux/workqueue.h>

#include <asm/uaccess.h>
#include <asm/system.h>
#include <asm/io.h>

#include "hgpio.h"
#include "gpio_i2c_2.h" 


/* 
 * I2C by GPIO simulated  clear 0 routine.
 *
 * @param whichline: GPIO control line
 *
 */
static void i2c_clr_2(unsigned char whichline)
{
    unsigned char regvalue;

    if(whichline == SCL_2)
    {
        regvalue = HW_REG_2(GPIO_3_DIR);
        regvalue |= SCL_2;
        HW_REG_2(GPIO_3_DIR) = regvalue;

        HW_REG_2(GPIO_I2C_2_SCL_REG) = 0;
        return;
    }
    else if(whichline == SDA_2)
    {
        regvalue = HW_REG_2(GPIO_3_DIR);
        regvalue |= SDA_2;
        HW_REG_2(GPIO_3_DIR) = regvalue;

        HW_REG_2(GPIO_I2C_2_SDA_REG) = 0;
        return;
    }
    else if(whichline == (SDA_2|SCL_2))
    {
        regvalue = HW_REG_2(GPIO_3_DIR);
        regvalue |= (SDA_2|SCL_2);
        HW_REG_2(GPIO_3_DIR) = regvalue;

        HW_REG_2(GPIO_I2C_2_SCLSDA_REG) = 0;
        return;
    }
    else
    {
        printk("Error input.\n");
        return;
    }

}

/* 
 * I2C by GPIO simulated  set 1 routine.
 *
 * @param whichline: GPIO control line
 *
 */
static void  i2c_set_2(unsigned char whichline)
{
    unsigned char regvalue;

    if(whichline == SCL_2)
    {
        regvalue = HW_REG_2(GPIO_3_DIR);
        regvalue |= SCL_2;
        HW_REG_2(GPIO_3_DIR) = regvalue;

        HW_REG_2(GPIO_I2C_2_SCL_REG) = SCL_2;
        return;
    }
    else if(whichline == SDA_2)
    {
        regvalue = HW_REG_2(GPIO_3_DIR);
        regvalue |= SDA_2;
        HW_REG_2(GPIO_3_DIR) = regvalue;

        HW_REG_2(GPIO_I2C_2_SDA_REG) = SDA_2;
        return;
    }
    else if(whichline == (SDA_2|SCL_2))
    {
        regvalue = HW_REG_2(GPIO_3_DIR);
        regvalue |= (SDA_2|SCL_2);
        HW_REG_2(GPIO_3_DIR) = regvalue;

        HW_REG_2(GPIO_I2C_2_SCLSDA_REG) = (SDA_2|SCL_2);
        return;
    }
    else
    {
        printk("Error input.\n");
        return;
    }
}

/*
 *  delays for a specified number of micro seconds rountine.
 *
 *  @param usec: number of micro seconds to pause for
 *
 */
void time_delay_us_2(unsigned int usec)
{
    int i,j;

    for(i=0;i<usec * 5;i++)
    {
        for(j=0;j<47;j++)
        {;}
    }
}

/* 
 * I2C by GPIO simulated  read data routine.
 *
 * @return value: a bit for read 
 *
 */
static unsigned char i2c_data_read1_2(void)
{
    unsigned char regvalue;


    regvalue = HW_REG_2(GPIO_I2C_2_SDA_REG);
    if((regvalue&SDA_2) != 0)
        return 1;
    else
        return 0;
}

static unsigned char i2c_data_read_2(void)
{
    unsigned char regvalue;

    regvalue = HW_REG_2(GPIO_3_DIR);
    regvalue &= (~SDA_2);
    HW_REG_2(GPIO_3_DIR) = regvalue;
    DELAY_2(1);

    regvalue = HW_REG_2(GPIO_I2C_2_SDA_REG);
    if((regvalue&SDA_2) != 0)
        return 1;
    else
        return 0;
}

/*
 * sends a start bit via I2C rountine.
 *
 */
static void i2c_start_bit_2(void)
{
    DELAY_2(1);
    i2c_set_2(SDA_2 | SCL_2);
    DELAY_2(1);
    i2c_clr_2(SDA_2);
    DELAY_2(2);
}

/*
 * sends a stop bit via I2C rountine.
 *
 */
static void i2c_stop_bit_2(void)
{
#if 0
    /* clock the ack */
    DELAY_2(1);
    i2c_set_2(SCL_2);
    DELAY_2(1); 
    i2c_clr_2(SCL_2);  

    /* actual stop bit */
    DELAY_2(1);
    i2c_clr_2(SDA_2);
    DELAY_2(1);
    i2c_set_2(SCL_2);
    DELAY_2(1);
    i2c_set_2(SDA_2);
    DELAY_2(1);      
#else
    /* clock the ack */
    DELAY_2(1); 
    i2c_clr_2(SCL_2);  

    /* actual stop bit */
    DELAY_2(1);
    i2c_clr_2(SDA_2);
    DELAY_2(1);
    i2c_set_2(SCL_2);
    DELAY_2(1);
    i2c_set_2(SDA_2);
    DELAY_2(1);
    DELAY_2(1); 
    i2c_clr_2(SCL_2);  
#endif        

}

/*
 * sends a character over I2C rountine.
 *
 * @param  c: character to send
 *
 */
static void i2c_send_byte_2(unsigned char c)
{
    int i;
    local_irq_disable();
    for (i=0; i<8; i++)
    {
        DELAY_2(1);
        i2c_clr_2(SCL_2);
        DELAY_2(1);

        if (c & (1<<(7-i)))
            i2c_set_2(SDA_2);
        else
            i2c_clr_2(SDA_2);

        DELAY_2(1);
        i2c_set_2(SCL_2);
        DELAY_2(1);
        i2c_clr_2(SCL_2);
    }
    DELAY_2(1);
    // i2c_set(SDA);
    local_irq_enable();
}

/*  receives a character from I2C rountine.
 *
 *  @return value: character received
 *
 */
static unsigned char i2c_receive_byte_2(void)
{
    int j=0;
    int i;
    unsigned char regvalue;

    local_irq_disable();
#if 0    
    for (i=0; i<8; i++)
    {
        DELAY_2(1);
        i2c_clr_2(SCL_2);
        DELAY_2(2);
        i2c_set_2(SCL_2);

        regvalue = HW_REG_2(GPIO_3_DIR);
        regvalue &= (~SDA_2);
        HW_REG_2(GPIO_3_DIR) = regvalue;
        DELAY_2(1);

        if (i2c_data_read_2())
            j+=(1<<(7-i));

        DELAY_2(1);
        i2c_clr_2(SCL_2);
    }
#else

    regvalue = HW_REG_2(GPIO_3_DIR);
    regvalue &= (~SDA_2);
    HW_REG_2(GPIO_3_DIR) = regvalue;

    for (i=0; i<8; i++)
    {
        DELAY_2(1);
        i2c_clr_2(SCL_2);

        DELAY_2(4);
        i2c_set_2(SCL_2);
        DELAY_2(2);


        if (i2c_data_read1_2())
            j+=(1<<(7-i));

        DELAY_2(1);
        i2c_clr_2(SCL_2);
    }
#endif
    local_irq_enable();
    DELAY_2(1);
    // i2c_clr(SDA);
    // DELAY(1);

    return j;
}

/*  receives an acknowledge from I2C rountine.
 *
 *  @return value: 0--Ack received; 1--Nack received
 *          
 */
static int i2c_receive_ack_2(void)
{
    int nack;
    unsigned char regvalue;

    DELAY_2(1);

    regvalue = HW_REG_2(GPIO_3_DIR);
    regvalue &= (~SDA_2);
    HW_REG_2(GPIO_3_DIR) = regvalue;

    DELAY_2(1);
    i2c_clr_2(SCL_2);
    DELAY_2(1);
    i2c_set_2(SCL_2);
    DELAY_2(1);



    nack = i2c_data_read_2();

    DELAY_2(1);
    i2c_clr_2(SCL_2);
    DELAY_2(1);
    //  i2c_set(SDA);
    //  DELAY(1);

    if (nack == 0)
        return 1; 

    return 0;
}

#if 0
static void i2c_send_ack_2(void)
{
    DELAY_2(1);
    i2c_clr_2(SCL_2);
    DELAY_2(1);
    //    i2c_set(SDA);
    i2c_clr_2(SDA_2);
    DELAY_2(1);
    i2c_set_2(SCL_2);
    DELAY_2(1);
    i2c_clr_2(SCL_2);
    DELAY_2(1);
    i2c_clr_2(SDA_2);
    DELAY_2(1);
}

static void i2c_send_nack_2(void)
{
    DELAY_2(1);
    i2c_clr_2(SCL_2);
    DELAY_2(1);
    i2c_set_2(SDA_2);
    //	i2c_clr(SDA);
    DELAY_2(1);
    i2c_set_2(SCL_2);
    DELAY_2(1);
    i2c_clr_2(SCL_2);
    DELAY_2(1);
    //    i2c_clr(SDA);
    DELAY_2(1);
}
#endif

//EXPORT_SYMBOL(gpio_i2c_read_i2c_2);
unsigned char gpio_i2c_read_i2c_2(unsigned char devaddress, unsigned char address)
{
    int rxdata;

    i2c_start_bit_2();
    i2c_send_byte_2((unsigned char)(devaddress));
    i2c_receive_ack_2();
    i2c_send_byte_2(address);
    i2c_receive_ack_2();
    i2c_start_bit_2();
    i2c_send_byte_2((unsigned char)(devaddress) | 1);
    i2c_receive_ack_2();
    rxdata = i2c_receive_byte_2();
    //i2c_send_ack();
    //i2c_send_nack();
    i2c_stop_bit_2();

    return rxdata;
}

//EXPORT_SYMBOL(gpio_i2c_write_i2c_2);
void gpio_i2c_write_i2c_2(unsigned char devaddress, unsigned char address, unsigned char data)
{
    i2c_start_bit_2();
    i2c_send_byte_2((unsigned char)(devaddress));
    i2c_receive_ack_2();
    i2c_send_byte_2(address);
    i2c_receive_ack_2();
    i2c_send_byte_2(data);
    // i2c_receive_ack();//add by hyping for tw2815
    i2c_stop_bit_2();
}  